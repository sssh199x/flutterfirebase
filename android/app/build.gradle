plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.brandbuilders.flutterfirebase"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.brandbuilders.flutterfirebase"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}
// by default it was like below:
// dependencies{}
// The issue you encountered was related to conflicts between different versions of the Kotlin standard library modules in your project. Specifically, the error mentioned the presence of the same class (kotlin.collections.jdk8.CollectionsJDK8Kt) in both kotlin-stdlib-1.8.0 and kotlin-stdlib-jdk8-1.7.10 modules, leading to a duplicate class error.To resolve this issue, you implemented the following changes:Use the Correct Block: The constraints block is used with the new Gradle Dependency Management Plugin. However, this plugin might not be available or necessary in your project, especially if you are using an older version of Gradle.Forcing Kotlin Version: To resolve the duplicate class issue, you added a configurations.all block in the app/build.gradle file. This block is used to force the use of a specific version of kotlin-stdlib for all dependencies. By doing so, you are ensuring that any transitive dependencies that declare kotlin-stdlib-jdk7 or kotlin-stdlib-jdk8 will use the specified version ($kotlin_version).Here's the relevant part of the modified app/build.gradle file:
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

configurations.all {
    resolutionStrategy {
        // Use newer Kotlin version for dependencies that declare kotlin-stdlib
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}
